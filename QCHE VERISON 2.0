import numpy as np
import hashlib
import random
import os

def logistic_map(seed, r, size):
    """Generates a chaotic sequence using the logistic map."""
    x = seed
    key_sequence = []
    for _ in range(size):
        x = r * x * (1 - x)  
        key_sequence.append(int(x * 256) % 256)  
    return np.array(key_sequence, dtype=np.uint8)

def arnold_cat_map(image, iterations=1):
    """ Applies Arnold’s Cat Map transformation for diffusion """
    n = image.shape[0]
    transformed = np.copy(image)
    
    for _ in range(iterations):
        temp = np.zeros_like(transformed)
        for x in range(n):
            for y in range(n):
                new_x = (x + y) % n
                new_y = (x + 2 * y) % n
                temp[new_x, new_y] = transformed[x, y]
        transformed = temp
    return transformed

def inverse_arnold_cat_map(image, iterations=1):
    """ Reverses Arnold’s Cat Map transformation """
    n = image.shape[0]
    transformed = np.copy(image)
    
    for _ in range(iterations):
        temp = np.zeros_like(transformed)
        for x in range(n):
            for y in range(n):
                new_x = (2*x - y) % n
                new_y = (-x + y) % n
                temp[new_x, new_y] = transformed[x, y]
        transformed = temp
    return transformed

def mutate_key(key, ciphertext):
    """Mutates the key using a cryptographic hash of the ciphertext."""
    hash_val = hashlib.sha256(ciphertext).digest()
    return np.bitwise_xor(key, np.frombuffer(hash_val[:len(key)], dtype=np.uint8))

def qche_encrypt(plaintext, key_seed, r):
    """ Encrypts plaintext using Quantum-Chaos Hybrid Encryption with multi-layer security """
    plaintext_bytes = np.frombuffer(plaintext.encode(), dtype=np.uint8)
    
    # Generate initial chaotic key
    key1 = logistic_map(key_seed, r, len(plaintext_bytes))
    key2 = logistic_map(key_seed * 0.5, r * 1.1, len(plaintext_bytes))  # Secondary chaotic key
    
    # First Layer: Chaotic XOR encryption
    temp_cipher = np.bitwise_xor(plaintext_bytes, key1)
    
    # Second Layer: XOR with a second chaotic key
    ciphertext = np.bitwise_xor(temp_cipher, key2)
    
    # Apply Arnold’s Cat Map for diffusion (2 rounds)
    size = int(np.ceil(np.sqrt(len(ciphertext))))  
    padded_cipher = np.pad(ciphertext, (0, size**2 - len(ciphertext)), 'constant')
    matrix_cipher = padded_cipher.reshape(size, size)
    scrambled_cipher = arnold_cat_map(matrix_cipher, iterations=2)
    
    # Flatten back to 1D
    final_ciphertext = scrambled_cipher.flatten()[:len(ciphertext)]
    
    # Adaptive key mutation
    new_key = mutate_key(key1, final_ciphertext.tobytes())
    
    return final_ciphertext.tobytes(), new_key

def qche_decrypt(ciphertext, key_seed, r):
    """ Decrypts ciphertext using Quantum-Chaos Hybrid Encryption """
    ciphertext_bytes = np.frombuffer(ciphertext, dtype=np.uint8)
    
    # Generate initial chaotic keys (same process as encryption)
    key1 = logistic_map(key_seed, r, len(ciphertext_bytes))
    key2 = logistic_map(key_seed * 0.5, r * 1.1, len(ciphertext_bytes))
    
    # Reverse Arnold’s Cat Map (2 rounds)
    size = int(np.ceil(np.sqrt(len(ciphertext_bytes))))  
    padded_cipher = np.pad(ciphertext_bytes, (0, size**2 - len(ciphertext_bytes)), 'constant')
    matrix_cipher = padded_cipher.reshape(size, size)
    unscrambled_cipher = inverse_arnold_cat_map(matrix_cipher, iterations=2)
    
    # Flatten back
    final_ciphertext = unscrambled_cipher.flatten()[:len(ciphertext_bytes)]
    
    # Reverse Second XOR layer
    temp_decrypt = np.bitwise_xor(final_ciphertext, key2)
    
    # Reverse First XOR layer
    decrypted = np.bitwise_xor(temp_decrypt, key1)
    
    # Self-destruct key after decryption
    del key1, key2
    
    return decrypted.tobytes().decode(errors='ignore')

# Example usage
plaintext = "Quantum security is the future!"
key_seed = random.uniform(0, 1)  # Random initial seed
r = 3.99  # Chaotic parameter

# Encrypt
ciphertext, new_key = qche_encrypt(plaintext, key_seed, r)
print(f"Ciphertext (bytes): {ciphertext}")

# Decrypt
decrypted_text = qche_decrypt(ciphertext, key_seed, r)
print(f"Decrypted: {decrypted_text}")

# Verify self-destruction
try:
    print(new_key)  # Should raise an error since new_key was deleted
except NameError:
    print("Key successfully erased after decryption.")

